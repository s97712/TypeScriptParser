using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

[Generator]
public class EmptyDemoGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // 注册后初始化输出，生成打印源生成器路径的代码
        context.RegisterPostInitializationOutput(GenerateGeneratorPathCode);
    }

    private static List<string> IterData()
    {
        var parserAssembly = typeof(TypeScriptParser.Parser).Assembly;
        var allMetadata = parserAssembly.GetCustomAttributes<AssemblyMetadataAttribute>();
        
        var result = new List<string>();
        foreach (var attr in allMetadata)
        {
            result.Add($"{attr.Key}: {attr.Value}");
        }
        return result;
    }


    private static void GenerateGeneratorPathCode(IncrementalGeneratorPostInitializationContext context)
    {
        // 获取源生成器程序集的路径信息
        var generatorAssembly = Assembly.GetExecutingAssembly();
        var generatorLocation = generatorAssembly.Location;
        var generatorFullName = generatorAssembly.FullName;
        var parserPath = typeof(TypeScriptParser.Parser).Assembly.Location;

        var parserAssembly = typeof(TypeScriptParser.Parser).Assembly;

        var lines = IterData().Select(line => $"Console.WriteLine(\"{line}\");");
        var nativePath = parserAssembly.GetCustomAttributes<AssemblyMetadataAttribute>()
            .FirstOrDefault(attr => attr.Key == "TypeScriptParserNativePath")?.Value ?? "未找到";

        var source = $$"""
            // <auto-generated />
            // 由 EmptyDemoGenerator 生成的代码
            using System;

            namespace Demo
            {
                public static class Status
                {
                    public static void Print()
                    {
                        Console.WriteLine("=== 源生成器路径信息 ===");
                        Console.WriteLine($"生成器程序集全名: {{generatorFullName}}");
                        Console.WriteLine($"生成器程序集位置: {{generatorLocation}}");

                        Console.WriteLine($"获取元数据结束..");
                        {{string.Join("\n", lines)}}
                        Console.WriteLine($"获取元数据结束...");
                        Console.WriteLine($"NativePath: {{nativePath}}");

                        Console.WriteLine($"生成时间: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
                    }
                }
            }
            """;

        context.AddSource("GeneratorInfo.g.cs", SourceText.From(source, Encoding.UTF8));
    }
}